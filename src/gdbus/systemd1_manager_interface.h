/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __SYSTEMD1_MANAGER_INTERFACE_H__
#define __SYSTEMD1_MANAGER_INTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.systemd1.Manager */

#define TYPE_SYSTEMD1_MANAGER (systemd1_manager_get_type ())
#define SYSTEMD1_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SYSTEMD1_MANAGER, Systemd1Manager))
#define IS_SYSTEMD1_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SYSTEMD1_MANAGER))
#define SYSTEMD1_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_SYSTEMD1_MANAGER, Systemd1ManagerIface))

struct _Systemd1Manager;
typedef struct _Systemd1Manager Systemd1Manager;
typedef struct _Systemd1ManagerIface Systemd1ManagerIface;

struct _Systemd1ManagerIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_abandon_scope) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_add_dependency_unit_files) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    const gchar *arg_target,
    const gchar *arg_type,
    gboolean arg_runtime,
    gboolean arg_force);

  gboolean (*handle_attach_processes_to_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unit_name,
    const gchar *arg_subcgroup,
    GVariant *arg_pids);

  gboolean (*handle_bind_mount_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_source,
    const gchar *arg_destination,
    gboolean arg_read_only,
    gboolean arg_mkdir);

  gboolean (*handle_cancel_job) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_id);

  gboolean (*handle_clean_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *const *arg_mask);

  gboolean (*handle_clear_jobs) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_disable_unit_files) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    gboolean arg_runtime);

  gboolean (*handle_disable_unit_files_with_flags) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    guint64 arg_flags);

  gboolean (*handle_dump) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_dump_by_file_descriptor) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_enable_unit_files) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force);

  gboolean (*handle_enable_unit_files_with_flags) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    guint64 arg_flags);

  gboolean (*handle_enqueue_marked_jobs) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_enqueue_unit_job) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_job_type,
    const gchar *arg_job_mode);

  gboolean (*handle_exit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_freeze_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_get_default_target) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_dynamic_users) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_job) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_id);

  gboolean (*handle_get_job_after) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_id);

  gboolean (*handle_get_job_before) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_id);

  gboolean (*handle_get_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_get_unit_by_control_group) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_cgroup);

  gboolean (*handle_get_unit_by_invocation_id) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_invocation_id);

  gboolean (*handle_get_unit_by_pid) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_pid);

  gboolean (*handle_get_unit_file_links) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    gboolean arg_runtime);

  gboolean (*handle_get_unit_file_state) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_file);

  gboolean (*handle_get_unit_processes) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_halt) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_kexec) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_kill_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_whom,
    gint arg_signal);

  gboolean (*handle_link_unit_files) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force);

  gboolean (*handle_list_jobs) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_unit_files) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_unit_files_by_patterns) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_states,
    const gchar *const *arg_patterns);

  gboolean (*handle_list_units) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_units_by_names) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_names);

  gboolean (*handle_list_units_by_patterns) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_states,
    const gchar *const *arg_patterns);

  gboolean (*handle_list_units_filtered) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_states);

  gboolean (*handle_load_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_lookup_dynamic_user_by_name) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_lookup_dynamic_user_by_uid) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_uid);

  gboolean (*handle_mask_unit_files) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force);

  gboolean (*handle_mount_image_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_source,
    const gchar *arg_destination,
    gboolean arg_read_only,
    gboolean arg_mkdir,
    GVariant *arg_options);

  gboolean (*handle_power_off) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_preset_all_unit_files) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_mode,
    gboolean arg_runtime,
    gboolean arg_force);

  gboolean (*handle_preset_unit_files) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force);

  gboolean (*handle_preset_unit_files_with_mode) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    const gchar *arg_mode,
    gboolean arg_runtime,
    gboolean arg_force);

  gboolean (*handle_reboot) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_reenable_unit_files) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force);

  gboolean (*handle_reexecute) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_ref_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_reload) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_reload_or_restart_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_mode);

  gboolean (*handle_reload_or_try_restart_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_mode);

  gboolean (*handle_reload_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_mode);

  gboolean (*handle_reset_failed) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_reset_failed_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_restart_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_mode);

  gboolean (*handle_revert_unit_files) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files);

  gboolean (*handle_set_default_target) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    gboolean arg_force);

  gboolean (*handle_set_environment) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_assignments);

  gboolean (*handle_set_exit_code) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    guchar arg_number);

  gboolean (*handle_set_show_status) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_mode);

  gboolean (*handle_set_unit_properties) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    gboolean arg_runtime,
    GVariant *arg_properties);

  gboolean (*handle_start_transient_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_mode,
    GVariant *arg_properties,
    GVariant *arg_aux);

  gboolean (*handle_start_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_mode);

  gboolean (*handle_start_unit_replace) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_old_unit,
    const gchar *arg_new_unit,
    const gchar *arg_mode);

  gboolean (*handle_stop_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_mode);

  gboolean (*handle_subscribe) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_switch_root) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_new_root,
    const gchar *arg_init);

  gboolean (*handle_thaw_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_try_restart_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_mode);

  gboolean (*handle_unmask_unit_files) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    gboolean arg_runtime);

  gboolean (*handle_unref_unit) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_unset_and_set_environment) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_names,
    const gchar *const *arg_assignments);

  gboolean (*handle_unset_environment) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_names);

  gboolean (*handle_unsubscribe) (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_architecture) (Systemd1Manager *object);

  gboolean  (*get_confirm_spawn) (Systemd1Manager *object);

  const gchar * (*get_control_group) (Systemd1Manager *object);

  const gchar * (*get_ctrl_alt_del_burst_action) (Systemd1Manager *object);

  gboolean  (*get_default_block_ioaccounting) (Systemd1Manager *object);

  gboolean  (*get_default_cpuaccounting) (Systemd1Manager *object);

  guint64  (*get_default_limit_as) (Systemd1Manager *object);

  guint64  (*get_default_limit_assoft) (Systemd1Manager *object);

  guint64  (*get_default_limit_core) (Systemd1Manager *object);

  guint64  (*get_default_limit_coresoft) (Systemd1Manager *object);

  guint64  (*get_default_limit_cpu) (Systemd1Manager *object);

  guint64  (*get_default_limit_cpusoft) (Systemd1Manager *object);

  guint64  (*get_default_limit_data) (Systemd1Manager *object);

  guint64  (*get_default_limit_datasoft) (Systemd1Manager *object);

  guint64  (*get_default_limit_fsize) (Systemd1Manager *object);

  guint64  (*get_default_limit_fsizesoft) (Systemd1Manager *object);

  guint64  (*get_default_limit_locks) (Systemd1Manager *object);

  guint64  (*get_default_limit_lockssoft) (Systemd1Manager *object);

  guint64  (*get_default_limit_memlock) (Systemd1Manager *object);

  guint64  (*get_default_limit_memlocksoft) (Systemd1Manager *object);

  guint64  (*get_default_limit_msgqueue) (Systemd1Manager *object);

  guint64  (*get_default_limit_msgqueuesoft) (Systemd1Manager *object);

  guint64  (*get_default_limit_nice) (Systemd1Manager *object);

  guint64  (*get_default_limit_nicesoft) (Systemd1Manager *object);

  guint64  (*get_default_limit_nofile) (Systemd1Manager *object);

  guint64  (*get_default_limit_nofilesoft) (Systemd1Manager *object);

  guint64  (*get_default_limit_nproc) (Systemd1Manager *object);

  guint64  (*get_default_limit_nprocsoft) (Systemd1Manager *object);

  guint64  (*get_default_limit_rss) (Systemd1Manager *object);

  guint64  (*get_default_limit_rsssoft) (Systemd1Manager *object);

  guint64  (*get_default_limit_rtprio) (Systemd1Manager *object);

  guint64  (*get_default_limit_rtpriosoft) (Systemd1Manager *object);

  guint64  (*get_default_limit_rttime) (Systemd1Manager *object);

  guint64  (*get_default_limit_rttimesoft) (Systemd1Manager *object);

  guint64  (*get_default_limit_sigpending) (Systemd1Manager *object);

  guint64  (*get_default_limit_sigpendingsoft) (Systemd1Manager *object);

  guint64  (*get_default_limit_stack) (Systemd1Manager *object);

  guint64  (*get_default_limit_stacksoft) (Systemd1Manager *object);

  gboolean  (*get_default_memory_accounting) (Systemd1Manager *object);

  const gchar * (*get_default_oompolicy) (Systemd1Manager *object);

  guint64  (*get_default_restart_usec) (Systemd1Manager *object);

  const gchar * (*get_default_standard_error) (Systemd1Manager *object);

  const gchar * (*get_default_standard_output) (Systemd1Manager *object);

  guint  (*get_default_start_limit_burst) (Systemd1Manager *object);

  guint64  (*get_default_start_limit_interval_usec) (Systemd1Manager *object);

  gboolean  (*get_default_tasks_accounting) (Systemd1Manager *object);

  guint64  (*get_default_tasks_max) (Systemd1Manager *object);

  guint64  (*get_default_timeout_abort_usec) (Systemd1Manager *object);

  guint64  (*get_default_timeout_start_usec) (Systemd1Manager *object);

  guint64  (*get_default_timeout_stop_usec) (Systemd1Manager *object);

  guint64  (*get_default_timer_accuracy_usec) (Systemd1Manager *object);

  const gchar *const * (*get_environment) (Systemd1Manager *object);

  guchar  (*get_exit_code) (Systemd1Manager *object);

  const gchar * (*get_features) (Systemd1Manager *object);

  guint64  (*get_finish_timestamp) (Systemd1Manager *object);

  guint64  (*get_finish_timestamp_monotonic) (Systemd1Manager *object);

  guint64  (*get_firmware_timestamp) (Systemd1Manager *object);

  guint64  (*get_firmware_timestamp_monotonic) (Systemd1Manager *object);

  guint64  (*get_generators_finish_timestamp) (Systemd1Manager *object);

  guint64  (*get_generators_finish_timestamp_monotonic) (Systemd1Manager *object);

  guint64  (*get_generators_start_timestamp) (Systemd1Manager *object);

  guint64  (*get_generators_start_timestamp_monotonic) (Systemd1Manager *object);

  guint64  (*get_init_rdgenerators_finish_timestamp) (Systemd1Manager *object);

  guint64  (*get_init_rdgenerators_finish_timestamp_monotonic) (Systemd1Manager *object);

  guint64  (*get_init_rdgenerators_start_timestamp) (Systemd1Manager *object);

  guint64  (*get_init_rdgenerators_start_timestamp_monotonic) (Systemd1Manager *object);

  guint64  (*get_init_rdsecurity_finish_timestamp) (Systemd1Manager *object);

  guint64  (*get_init_rdsecurity_finish_timestamp_monotonic) (Systemd1Manager *object);

  guint64  (*get_init_rdsecurity_start_timestamp) (Systemd1Manager *object);

  guint64  (*get_init_rdsecurity_start_timestamp_monotonic) (Systemd1Manager *object);

  guint64  (*get_init_rdtimestamp) (Systemd1Manager *object);

  guint64  (*get_init_rdtimestamp_monotonic) (Systemd1Manager *object);

  guint64  (*get_init_rdunits_load_finish_timestamp) (Systemd1Manager *object);

  guint64  (*get_init_rdunits_load_finish_timestamp_monotonic) (Systemd1Manager *object);

  guint64  (*get_init_rdunits_load_start_timestamp) (Systemd1Manager *object);

  guint64  (*get_init_rdunits_load_start_timestamp_monotonic) (Systemd1Manager *object);

  guint64  (*get_kernel_timestamp) (Systemd1Manager *object);

  guint64  (*get_kernel_timestamp_monotonic) (Systemd1Manager *object);

  guint64  (*get_kexec_watchdog_usec) (Systemd1Manager *object);

  guint64  (*get_loader_timestamp) (Systemd1Manager *object);

  guint64  (*get_loader_timestamp_monotonic) (Systemd1Manager *object);

  const gchar * (*get_log_level) (Systemd1Manager *object);

  const gchar * (*get_log_target) (Systemd1Manager *object);

  guint  (*get_nfailed_jobs) (Systemd1Manager *object);

  guint  (*get_nfailed_units) (Systemd1Manager *object);

  guint  (*get_ninstalled_jobs) (Systemd1Manager *object);

  guint  (*get_njobs) (Systemd1Manager *object);

  guint  (*get_nnames) (Systemd1Manager *object);

  gdouble  (*get_progress) (Systemd1Manager *object);

  guint64  (*get_reboot_watchdog_usec) (Systemd1Manager *object);

  guint64  (*get_runtime_watchdog_usec) (Systemd1Manager *object);

  guint64  (*get_security_finish_timestamp) (Systemd1Manager *object);

  guint64  (*get_security_finish_timestamp_monotonic) (Systemd1Manager *object);

  guint64  (*get_security_start_timestamp) (Systemd1Manager *object);

  guint64  (*get_security_start_timestamp_monotonic) (Systemd1Manager *object);

  gboolean  (*get_service_watchdogs) (Systemd1Manager *object);

  gboolean  (*get_show_status) (Systemd1Manager *object);

  const gchar * (*get_system_state) (Systemd1Manager *object);

  const gchar * (*get_tainted) (Systemd1Manager *object);

  guint64  (*get_timer_slack_nsec) (Systemd1Manager *object);

  const gchar *const * (*get_unit_path) (Systemd1Manager *object);

  guint64  (*get_units_load_finish_timestamp) (Systemd1Manager *object);

  guint64  (*get_units_load_finish_timestamp_monotonic) (Systemd1Manager *object);

  guint64  (*get_units_load_start_timestamp) (Systemd1Manager *object);

  guint64  (*get_units_load_start_timestamp_monotonic) (Systemd1Manager *object);

  guint64  (*get_userspace_timestamp) (Systemd1Manager *object);

  guint64  (*get_userspace_timestamp_monotonic) (Systemd1Manager *object);

  const gchar * (*get_version) (Systemd1Manager *object);

  const gchar * (*get_virtualization) (Systemd1Manager *object);

  void (*job_new) (
    Systemd1Manager *object,
    guint arg_id,
    const gchar *arg_job,
    const gchar *arg_unit);

  void (*job_removed) (
    Systemd1Manager *object,
    guint arg_id,
    const gchar *arg_job,
    const gchar *arg_unit,
    const gchar *arg_result);

  void (*reloading) (
    Systemd1Manager *object,
    gboolean arg_active);

  void (*startup_finished) (
    Systemd1Manager *object,
    guint64 arg_firmware,
    guint64 arg_loader,
    guint64 arg_kernel,
    guint64 arg_initrd,
    guint64 arg_userspace,
    guint64 arg_total);

  void (*unit_files_changed) (
    Systemd1Manager *object);

  void (*unit_new) (
    Systemd1Manager *object,
    const gchar *arg_id,
    const gchar *arg_unit);

  void (*unit_removed) (
    Systemd1Manager *object,
    const gchar *arg_id,
    const gchar *arg_unit);

};

GType systemd1_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *systemd1_manager_interface_info (void);
guint systemd1_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void systemd1_manager_complete_get_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unit);

void systemd1_manager_complete_get_unit_by_pid (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unit);

void systemd1_manager_complete_get_unit_by_invocation_id (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unit);

void systemd1_manager_complete_get_unit_by_control_group (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unit);

void systemd1_manager_complete_load_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unit);

void systemd1_manager_complete_start_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void systemd1_manager_complete_start_unit_replace (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void systemd1_manager_complete_stop_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void systemd1_manager_complete_reload_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void systemd1_manager_complete_restart_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void systemd1_manager_complete_try_restart_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void systemd1_manager_complete_reload_or_restart_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void systemd1_manager_complete_reload_or_try_restart_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void systemd1_manager_complete_enqueue_unit_job (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    guint job_id,
    const gchar *job_path,
    const gchar *unit_id,
    const gchar *unit_path,
    const gchar *job_type,
    GVariant *affected_jobs);

void systemd1_manager_complete_kill_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_clean_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_freeze_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_thaw_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_reset_failed_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_set_unit_properties (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_bind_mount_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_mount_image_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_ref_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_unref_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_start_transient_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void systemd1_manager_complete_get_unit_processes (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *processes);

void systemd1_manager_complete_attach_processes_to_unit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_abandon_scope (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_get_job (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void systemd1_manager_complete_get_job_after (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *jobs);

void systemd1_manager_complete_get_job_before (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *jobs);

void systemd1_manager_complete_cancel_job (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_clear_jobs (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_reset_failed (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_set_show_status (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_list_units (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *units);

void systemd1_manager_complete_list_units_filtered (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *units);

void systemd1_manager_complete_list_units_by_patterns (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *units);

void systemd1_manager_complete_list_units_by_names (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *units);

void systemd1_manager_complete_list_jobs (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *jobs);

void systemd1_manager_complete_subscribe (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_unsubscribe (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_dump (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *output);

void systemd1_manager_complete_dump_by_file_descriptor (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *fd);

void systemd1_manager_complete_reload (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_reexecute (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_exit (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_reboot (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_power_off (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_halt (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_kexec (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_switch_root (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_set_environment (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_unset_environment (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_unset_and_set_environment (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_enqueue_marked_jobs (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *jobs);

void systemd1_manager_complete_list_unit_files (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *unit_files);

void systemd1_manager_complete_list_unit_files_by_patterns (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *unit_files);

void systemd1_manager_complete_get_unit_file_state (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *state);

void systemd1_manager_complete_enable_unit_files (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean carries_install_info,
    GVariant *changes);

void systemd1_manager_complete_disable_unit_files (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *changes);

void systemd1_manager_complete_enable_unit_files_with_flags (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean carries_install_info,
    GVariant *changes);

void systemd1_manager_complete_disable_unit_files_with_flags (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *changes);

void systemd1_manager_complete_reenable_unit_files (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean carries_install_info,
    GVariant *changes);

void systemd1_manager_complete_link_unit_files (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *changes);

void systemd1_manager_complete_preset_unit_files (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean carries_install_info,
    GVariant *changes);

void systemd1_manager_complete_preset_unit_files_with_mode (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean carries_install_info,
    GVariant *changes);

void systemd1_manager_complete_mask_unit_files (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *changes);

void systemd1_manager_complete_unmask_unit_files (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *changes);

void systemd1_manager_complete_revert_unit_files (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *changes);

void systemd1_manager_complete_set_default_target (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *changes);

void systemd1_manager_complete_get_default_target (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *name);

void systemd1_manager_complete_preset_all_unit_files (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *changes);

void systemd1_manager_complete_add_dependency_unit_files (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *changes);

void systemd1_manager_complete_get_unit_file_links (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *links);

void systemd1_manager_complete_set_exit_code (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation);

void systemd1_manager_complete_lookup_dynamic_user_by_name (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    guint uid);

void systemd1_manager_complete_lookup_dynamic_user_by_uid (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *name);

void systemd1_manager_complete_get_dynamic_users (
    Systemd1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *users);



/* D-Bus signal emissions functions: */
void systemd1_manager_emit_unit_new (
    Systemd1Manager *object,
    const gchar *arg_id,
    const gchar *arg_unit);

void systemd1_manager_emit_unit_removed (
    Systemd1Manager *object,
    const gchar *arg_id,
    const gchar *arg_unit);

void systemd1_manager_emit_job_new (
    Systemd1Manager *object,
    guint arg_id,
    const gchar *arg_job,
    const gchar *arg_unit);

void systemd1_manager_emit_job_removed (
    Systemd1Manager *object,
    guint arg_id,
    const gchar *arg_job,
    const gchar *arg_unit,
    const gchar *arg_result);

void systemd1_manager_emit_startup_finished (
    Systemd1Manager *object,
    guint64 arg_firmware,
    guint64 arg_loader,
    guint64 arg_kernel,
    guint64 arg_initrd,
    guint64 arg_userspace,
    guint64 arg_total);

void systemd1_manager_emit_unit_files_changed (
    Systemd1Manager *object);

void systemd1_manager_emit_reloading (
    Systemd1Manager *object,
    gboolean arg_active);



/* D-Bus method calls: */
void systemd1_manager_call_get_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_get_unit_finish (
    Systemd1Manager *proxy,
    gchar **out_unit,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_get_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    gchar **out_unit,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_get_unit_by_pid (
    Systemd1Manager *proxy,
    guint arg_pid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_get_unit_by_pid_finish (
    Systemd1Manager *proxy,
    gchar **out_unit,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_get_unit_by_pid_sync (
    Systemd1Manager *proxy,
    guint arg_pid,
    gchar **out_unit,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_get_unit_by_invocation_id (
    Systemd1Manager *proxy,
    const gchar *arg_invocation_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_get_unit_by_invocation_id_finish (
    Systemd1Manager *proxy,
    gchar **out_unit,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_get_unit_by_invocation_id_sync (
    Systemd1Manager *proxy,
    const gchar *arg_invocation_id,
    gchar **out_unit,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_get_unit_by_control_group (
    Systemd1Manager *proxy,
    const gchar *arg_cgroup,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_get_unit_by_control_group_finish (
    Systemd1Manager *proxy,
    gchar **out_unit,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_get_unit_by_control_group_sync (
    Systemd1Manager *proxy,
    const gchar *arg_cgroup,
    gchar **out_unit,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_load_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_load_unit_finish (
    Systemd1Manager *proxy,
    gchar **out_unit,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_load_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    gchar **out_unit,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_start_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_start_unit_finish (
    Systemd1Manager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_start_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_start_unit_replace (
    Systemd1Manager *proxy,
    const gchar *arg_old_unit,
    const gchar *arg_new_unit,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_start_unit_replace_finish (
    Systemd1Manager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_start_unit_replace_sync (
    Systemd1Manager *proxy,
    const gchar *arg_old_unit,
    const gchar *arg_new_unit,
    const gchar *arg_mode,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_stop_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_stop_unit_finish (
    Systemd1Manager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_stop_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_reload_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_reload_unit_finish (
    Systemd1Manager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_reload_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_restart_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_restart_unit_finish (
    Systemd1Manager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_restart_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_try_restart_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_try_restart_unit_finish (
    Systemd1Manager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_try_restart_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_reload_or_restart_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_reload_or_restart_unit_finish (
    Systemd1Manager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_reload_or_restart_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_reload_or_try_restart_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_reload_or_try_restart_unit_finish (
    Systemd1Manager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_reload_or_try_restart_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_enqueue_unit_job (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_job_type,
    const gchar *arg_job_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_enqueue_unit_job_finish (
    Systemd1Manager *proxy,
    guint *out_job_id,
    gchar **out_job_path,
    gchar **out_unit_id,
    gchar **out_unit_path,
    gchar **out_job_type,
    GVariant **out_affected_jobs,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_enqueue_unit_job_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_job_type,
    const gchar *arg_job_mode,
    guint *out_job_id,
    gchar **out_job_path,
    gchar **out_unit_id,
    gchar **out_unit_path,
    gchar **out_job_type,
    GVariant **out_affected_jobs,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_kill_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_whom,
    gint arg_signal,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_kill_unit_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_kill_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_whom,
    gint arg_signal,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_clean_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *const *arg_mask,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_clean_unit_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_clean_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *const *arg_mask,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_freeze_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_freeze_unit_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_freeze_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_thaw_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_thaw_unit_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_thaw_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_reset_failed_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_reset_failed_unit_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_reset_failed_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_set_unit_properties (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    gboolean arg_runtime,
    GVariant *arg_properties,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_set_unit_properties_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_set_unit_properties_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    gboolean arg_runtime,
    GVariant *arg_properties,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_bind_mount_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_source,
    const gchar *arg_destination,
    gboolean arg_read_only,
    gboolean arg_mkdir,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_bind_mount_unit_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_bind_mount_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_source,
    const gchar *arg_destination,
    gboolean arg_read_only,
    gboolean arg_mkdir,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_mount_image_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_source,
    const gchar *arg_destination,
    gboolean arg_read_only,
    gboolean arg_mkdir,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_mount_image_unit_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_mount_image_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_source,
    const gchar *arg_destination,
    gboolean arg_read_only,
    gboolean arg_mkdir,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_ref_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_ref_unit_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_ref_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_unref_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_unref_unit_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_unref_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_start_transient_unit (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    GVariant *arg_properties,
    GVariant *arg_aux,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_start_transient_unit_finish (
    Systemd1Manager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_start_transient_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    GVariant *arg_properties,
    GVariant *arg_aux,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_get_unit_processes (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_get_unit_processes_finish (
    Systemd1Manager *proxy,
    GVariant **out_processes,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_get_unit_processes_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    GVariant **out_processes,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_attach_processes_to_unit (
    Systemd1Manager *proxy,
    const gchar *arg_unit_name,
    const gchar *arg_subcgroup,
    GVariant *arg_pids,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_attach_processes_to_unit_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_attach_processes_to_unit_sync (
    Systemd1Manager *proxy,
    const gchar *arg_unit_name,
    const gchar *arg_subcgroup,
    GVariant *arg_pids,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_abandon_scope (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_abandon_scope_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_abandon_scope_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_get_job (
    Systemd1Manager *proxy,
    guint arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_get_job_finish (
    Systemd1Manager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_get_job_sync (
    Systemd1Manager *proxy,
    guint arg_id,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_get_job_after (
    Systemd1Manager *proxy,
    guint arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_get_job_after_finish (
    Systemd1Manager *proxy,
    GVariant **out_jobs,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_get_job_after_sync (
    Systemd1Manager *proxy,
    guint arg_id,
    GVariant **out_jobs,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_get_job_before (
    Systemd1Manager *proxy,
    guint arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_get_job_before_finish (
    Systemd1Manager *proxy,
    GVariant **out_jobs,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_get_job_before_sync (
    Systemd1Manager *proxy,
    guint arg_id,
    GVariant **out_jobs,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_cancel_job (
    Systemd1Manager *proxy,
    guint arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_cancel_job_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_cancel_job_sync (
    Systemd1Manager *proxy,
    guint arg_id,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_clear_jobs (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_clear_jobs_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_clear_jobs_sync (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_reset_failed (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_reset_failed_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_reset_failed_sync (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_set_show_status (
    Systemd1Manager *proxy,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_set_show_status_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_set_show_status_sync (
    Systemd1Manager *proxy,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_list_units (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_list_units_finish (
    Systemd1Manager *proxy,
    GVariant **out_units,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_list_units_sync (
    Systemd1Manager *proxy,
    GVariant **out_units,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_list_units_filtered (
    Systemd1Manager *proxy,
    const gchar *const *arg_states,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_list_units_filtered_finish (
    Systemd1Manager *proxy,
    GVariant **out_units,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_list_units_filtered_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_states,
    GVariant **out_units,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_list_units_by_patterns (
    Systemd1Manager *proxy,
    const gchar *const *arg_states,
    const gchar *const *arg_patterns,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_list_units_by_patterns_finish (
    Systemd1Manager *proxy,
    GVariant **out_units,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_list_units_by_patterns_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_states,
    const gchar *const *arg_patterns,
    GVariant **out_units,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_list_units_by_names (
    Systemd1Manager *proxy,
    const gchar *const *arg_names,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_list_units_by_names_finish (
    Systemd1Manager *proxy,
    GVariant **out_units,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_list_units_by_names_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_names,
    GVariant **out_units,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_list_jobs (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_list_jobs_finish (
    Systemd1Manager *proxy,
    GVariant **out_jobs,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_list_jobs_sync (
    Systemd1Manager *proxy,
    GVariant **out_jobs,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_subscribe (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_subscribe_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_subscribe_sync (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_unsubscribe (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_unsubscribe_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_unsubscribe_sync (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_dump (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_dump_finish (
    Systemd1Manager *proxy,
    gchar **out_output,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_dump_sync (
    Systemd1Manager *proxy,
    gchar **out_output,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_dump_by_file_descriptor (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_dump_by_file_descriptor_finish (
    Systemd1Manager *proxy,
    GVariant **out_fd,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_dump_by_file_descriptor_sync (
    Systemd1Manager *proxy,
    GVariant **out_fd,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_reload (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_reload_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_reload_sync (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_reexecute (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_reexecute_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_reexecute_sync (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_exit (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_exit_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_exit_sync (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_reboot (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_reboot_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_reboot_sync (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_power_off (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_power_off_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_power_off_sync (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_halt (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_halt_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_halt_sync (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_kexec (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_kexec_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_kexec_sync (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_switch_root (
    Systemd1Manager *proxy,
    const gchar *arg_new_root,
    const gchar *arg_init,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_switch_root_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_switch_root_sync (
    Systemd1Manager *proxy,
    const gchar *arg_new_root,
    const gchar *arg_init,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_set_environment (
    Systemd1Manager *proxy,
    const gchar *const *arg_assignments,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_set_environment_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_set_environment_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_assignments,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_unset_environment (
    Systemd1Manager *proxy,
    const gchar *const *arg_names,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_unset_environment_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_unset_environment_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_names,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_unset_and_set_environment (
    Systemd1Manager *proxy,
    const gchar *const *arg_names,
    const gchar *const *arg_assignments,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_unset_and_set_environment_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_unset_and_set_environment_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_names,
    const gchar *const *arg_assignments,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_enqueue_marked_jobs (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_enqueue_marked_jobs_finish (
    Systemd1Manager *proxy,
    gchar ***out_jobs,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_enqueue_marked_jobs_sync (
    Systemd1Manager *proxy,
    gchar ***out_jobs,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_list_unit_files (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_list_unit_files_finish (
    Systemd1Manager *proxy,
    GVariant **out_unit_files,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_list_unit_files_sync (
    Systemd1Manager *proxy,
    GVariant **out_unit_files,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_list_unit_files_by_patterns (
    Systemd1Manager *proxy,
    const gchar *const *arg_states,
    const gchar *const *arg_patterns,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_list_unit_files_by_patterns_finish (
    Systemd1Manager *proxy,
    GVariant **out_unit_files,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_list_unit_files_by_patterns_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_states,
    const gchar *const *arg_patterns,
    GVariant **out_unit_files,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_get_unit_file_state (
    Systemd1Manager *proxy,
    const gchar *arg_file,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_get_unit_file_state_finish (
    Systemd1Manager *proxy,
    gchar **out_state,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_get_unit_file_state_sync (
    Systemd1Manager *proxy,
    const gchar *arg_file,
    gchar **out_state,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_enable_unit_files (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_enable_unit_files_finish (
    Systemd1Manager *proxy,
    gboolean *out_carries_install_info,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_enable_unit_files_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    gboolean *out_carries_install_info,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_disable_unit_files (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_disable_unit_files_finish (
    Systemd1Manager *proxy,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_disable_unit_files_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_enable_unit_files_with_flags (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    guint64 arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_enable_unit_files_with_flags_finish (
    Systemd1Manager *proxy,
    gboolean *out_carries_install_info,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_enable_unit_files_with_flags_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    guint64 arg_flags,
    gboolean *out_carries_install_info,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_disable_unit_files_with_flags (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    guint64 arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_disable_unit_files_with_flags_finish (
    Systemd1Manager *proxy,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_disable_unit_files_with_flags_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    guint64 arg_flags,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_reenable_unit_files (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_reenable_unit_files_finish (
    Systemd1Manager *proxy,
    gboolean *out_carries_install_info,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_reenable_unit_files_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    gboolean *out_carries_install_info,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_link_unit_files (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_link_unit_files_finish (
    Systemd1Manager *proxy,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_link_unit_files_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_preset_unit_files (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_preset_unit_files_finish (
    Systemd1Manager *proxy,
    gboolean *out_carries_install_info,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_preset_unit_files_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    gboolean *out_carries_install_info,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_preset_unit_files_with_mode (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    const gchar *arg_mode,
    gboolean arg_runtime,
    gboolean arg_force,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_preset_unit_files_with_mode_finish (
    Systemd1Manager *proxy,
    gboolean *out_carries_install_info,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_preset_unit_files_with_mode_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    const gchar *arg_mode,
    gboolean arg_runtime,
    gboolean arg_force,
    gboolean *out_carries_install_info,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_mask_unit_files (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_mask_unit_files_finish (
    Systemd1Manager *proxy,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_mask_unit_files_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_unmask_unit_files (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_unmask_unit_files_finish (
    Systemd1Manager *proxy,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_unmask_unit_files_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_revert_unit_files (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_revert_unit_files_finish (
    Systemd1Manager *proxy,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_revert_unit_files_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_set_default_target (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    gboolean arg_force,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_set_default_target_finish (
    Systemd1Manager *proxy,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_set_default_target_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    gboolean arg_force,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_get_default_target (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_get_default_target_finish (
    Systemd1Manager *proxy,
    gchar **out_name,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_get_default_target_sync (
    Systemd1Manager *proxy,
    gchar **out_name,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_preset_all_unit_files (
    Systemd1Manager *proxy,
    const gchar *arg_mode,
    gboolean arg_runtime,
    gboolean arg_force,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_preset_all_unit_files_finish (
    Systemd1Manager *proxy,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_preset_all_unit_files_sync (
    Systemd1Manager *proxy,
    const gchar *arg_mode,
    gboolean arg_runtime,
    gboolean arg_force,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_add_dependency_unit_files (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    const gchar *arg_target,
    const gchar *arg_type,
    gboolean arg_runtime,
    gboolean arg_force,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_add_dependency_unit_files_finish (
    Systemd1Manager *proxy,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_add_dependency_unit_files_sync (
    Systemd1Manager *proxy,
    const gchar *const *arg_files,
    const gchar *arg_target,
    const gchar *arg_type,
    gboolean arg_runtime,
    gboolean arg_force,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_get_unit_file_links (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    gboolean arg_runtime,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_get_unit_file_links_finish (
    Systemd1Manager *proxy,
    gchar ***out_links,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_get_unit_file_links_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    gboolean arg_runtime,
    gchar ***out_links,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_set_exit_code (
    Systemd1Manager *proxy,
    guchar arg_number,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_set_exit_code_finish (
    Systemd1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_set_exit_code_sync (
    Systemd1Manager *proxy,
    guchar arg_number,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_lookup_dynamic_user_by_name (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_lookup_dynamic_user_by_name_finish (
    Systemd1Manager *proxy,
    guint *out_uid,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_lookup_dynamic_user_by_name_sync (
    Systemd1Manager *proxy,
    const gchar *arg_name,
    guint *out_uid,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_lookup_dynamic_user_by_uid (
    Systemd1Manager *proxy,
    guint arg_uid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_lookup_dynamic_user_by_uid_finish (
    Systemd1Manager *proxy,
    gchar **out_name,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_lookup_dynamic_user_by_uid_sync (
    Systemd1Manager *proxy,
    guint arg_uid,
    gchar **out_name,
    GCancellable *cancellable,
    GError **error);

void systemd1_manager_call_get_dynamic_users (
    Systemd1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean systemd1_manager_call_get_dynamic_users_finish (
    Systemd1Manager *proxy,
    GVariant **out_users,
    GAsyncResult *res,
    GError **error);

gboolean systemd1_manager_call_get_dynamic_users_sync (
    Systemd1Manager *proxy,
    GVariant **out_users,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *systemd1_manager_get_version (Systemd1Manager *object);
gchar *systemd1_manager_dup_version (Systemd1Manager *object);
void systemd1_manager_set_version (Systemd1Manager *object, const gchar *value);

const gchar *systemd1_manager_get_features (Systemd1Manager *object);
gchar *systemd1_manager_dup_features (Systemd1Manager *object);
void systemd1_manager_set_features (Systemd1Manager *object, const gchar *value);

const gchar *systemd1_manager_get_virtualization (Systemd1Manager *object);
gchar *systemd1_manager_dup_virtualization (Systemd1Manager *object);
void systemd1_manager_set_virtualization (Systemd1Manager *object, const gchar *value);

const gchar *systemd1_manager_get_architecture (Systemd1Manager *object);
gchar *systemd1_manager_dup_architecture (Systemd1Manager *object);
void systemd1_manager_set_architecture (Systemd1Manager *object, const gchar *value);

const gchar *systemd1_manager_get_tainted (Systemd1Manager *object);
gchar *systemd1_manager_dup_tainted (Systemd1Manager *object);
void systemd1_manager_set_tainted (Systemd1Manager *object, const gchar *value);

guint64 systemd1_manager_get_firmware_timestamp (Systemd1Manager *object);
void systemd1_manager_set_firmware_timestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_firmware_timestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_firmware_timestamp_monotonic (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_loader_timestamp (Systemd1Manager *object);
void systemd1_manager_set_loader_timestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_loader_timestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_loader_timestamp_monotonic (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_kernel_timestamp (Systemd1Manager *object);
void systemd1_manager_set_kernel_timestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_kernel_timestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_kernel_timestamp_monotonic (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_init_rdtimestamp (Systemd1Manager *object);
void systemd1_manager_set_init_rdtimestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_init_rdtimestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_init_rdtimestamp_monotonic (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_userspace_timestamp (Systemd1Manager *object);
void systemd1_manager_set_userspace_timestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_userspace_timestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_userspace_timestamp_monotonic (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_finish_timestamp (Systemd1Manager *object);
void systemd1_manager_set_finish_timestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_finish_timestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_finish_timestamp_monotonic (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_security_start_timestamp (Systemd1Manager *object);
void systemd1_manager_set_security_start_timestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_security_start_timestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_security_start_timestamp_monotonic (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_security_finish_timestamp (Systemd1Manager *object);
void systemd1_manager_set_security_finish_timestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_security_finish_timestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_security_finish_timestamp_monotonic (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_generators_start_timestamp (Systemd1Manager *object);
void systemd1_manager_set_generators_start_timestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_generators_start_timestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_generators_start_timestamp_monotonic (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_generators_finish_timestamp (Systemd1Manager *object);
void systemd1_manager_set_generators_finish_timestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_generators_finish_timestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_generators_finish_timestamp_monotonic (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_units_load_start_timestamp (Systemd1Manager *object);
void systemd1_manager_set_units_load_start_timestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_units_load_start_timestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_units_load_start_timestamp_monotonic (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_units_load_finish_timestamp (Systemd1Manager *object);
void systemd1_manager_set_units_load_finish_timestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_units_load_finish_timestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_units_load_finish_timestamp_monotonic (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_init_rdsecurity_start_timestamp (Systemd1Manager *object);
void systemd1_manager_set_init_rdsecurity_start_timestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_init_rdsecurity_start_timestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_init_rdsecurity_start_timestamp_monotonic (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_init_rdsecurity_finish_timestamp (Systemd1Manager *object);
void systemd1_manager_set_init_rdsecurity_finish_timestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_init_rdsecurity_finish_timestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_init_rdsecurity_finish_timestamp_monotonic (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_init_rdgenerators_start_timestamp (Systemd1Manager *object);
void systemd1_manager_set_init_rdgenerators_start_timestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_init_rdgenerators_start_timestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_init_rdgenerators_start_timestamp_monotonic (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_init_rdgenerators_finish_timestamp (Systemd1Manager *object);
void systemd1_manager_set_init_rdgenerators_finish_timestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_init_rdgenerators_finish_timestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_init_rdgenerators_finish_timestamp_monotonic (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_init_rdunits_load_start_timestamp (Systemd1Manager *object);
void systemd1_manager_set_init_rdunits_load_start_timestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_init_rdunits_load_start_timestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_init_rdunits_load_start_timestamp_monotonic (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_init_rdunits_load_finish_timestamp (Systemd1Manager *object);
void systemd1_manager_set_init_rdunits_load_finish_timestamp (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_init_rdunits_load_finish_timestamp_monotonic (Systemd1Manager *object);
void systemd1_manager_set_init_rdunits_load_finish_timestamp_monotonic (Systemd1Manager *object, guint64 value);

const gchar *systemd1_manager_get_log_level (Systemd1Manager *object);
gchar *systemd1_manager_dup_log_level (Systemd1Manager *object);
void systemd1_manager_set_log_level (Systemd1Manager *object, const gchar *value);

const gchar *systemd1_manager_get_log_target (Systemd1Manager *object);
gchar *systemd1_manager_dup_log_target (Systemd1Manager *object);
void systemd1_manager_set_log_target (Systemd1Manager *object, const gchar *value);

guint systemd1_manager_get_nnames (Systemd1Manager *object);
void systemd1_manager_set_nnames (Systemd1Manager *object, guint value);

guint systemd1_manager_get_nfailed_units (Systemd1Manager *object);
void systemd1_manager_set_nfailed_units (Systemd1Manager *object, guint value);

guint systemd1_manager_get_njobs (Systemd1Manager *object);
void systemd1_manager_set_njobs (Systemd1Manager *object, guint value);

guint systemd1_manager_get_ninstalled_jobs (Systemd1Manager *object);
void systemd1_manager_set_ninstalled_jobs (Systemd1Manager *object, guint value);

guint systemd1_manager_get_nfailed_jobs (Systemd1Manager *object);
void systemd1_manager_set_nfailed_jobs (Systemd1Manager *object, guint value);

gdouble systemd1_manager_get_progress (Systemd1Manager *object);
void systemd1_manager_set_progress (Systemd1Manager *object, gdouble value);

const gchar *const *systemd1_manager_get_environment (Systemd1Manager *object);
gchar **systemd1_manager_dup_environment (Systemd1Manager *object);
void systemd1_manager_set_environment (Systemd1Manager *object, const gchar *const *value);

gboolean systemd1_manager_get_confirm_spawn (Systemd1Manager *object);
void systemd1_manager_set_confirm_spawn (Systemd1Manager *object, gboolean value);

gboolean systemd1_manager_get_show_status (Systemd1Manager *object);
void systemd1_manager_set_show_status (Systemd1Manager *object, gboolean value);

const gchar *const *systemd1_manager_get_unit_path (Systemd1Manager *object);
gchar **systemd1_manager_dup_unit_path (Systemd1Manager *object);
void systemd1_manager_set_unit_path (Systemd1Manager *object, const gchar *const *value);

const gchar *systemd1_manager_get_default_standard_output (Systemd1Manager *object);
gchar *systemd1_manager_dup_default_standard_output (Systemd1Manager *object);
void systemd1_manager_set_default_standard_output (Systemd1Manager *object, const gchar *value);

const gchar *systemd1_manager_get_default_standard_error (Systemd1Manager *object);
gchar *systemd1_manager_dup_default_standard_error (Systemd1Manager *object);
void systemd1_manager_set_default_standard_error (Systemd1Manager *object, const gchar *value);

guint64 systemd1_manager_get_runtime_watchdog_usec (Systemd1Manager *object);
void systemd1_manager_set_runtime_watchdog_usec (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_reboot_watchdog_usec (Systemd1Manager *object);
void systemd1_manager_set_reboot_watchdog_usec (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_kexec_watchdog_usec (Systemd1Manager *object);
void systemd1_manager_set_kexec_watchdog_usec (Systemd1Manager *object, guint64 value);

gboolean systemd1_manager_get_service_watchdogs (Systemd1Manager *object);
void systemd1_manager_set_service_watchdogs (Systemd1Manager *object, gboolean value);

const gchar *systemd1_manager_get_control_group (Systemd1Manager *object);
gchar *systemd1_manager_dup_control_group (Systemd1Manager *object);
void systemd1_manager_set_control_group (Systemd1Manager *object, const gchar *value);

const gchar *systemd1_manager_get_system_state (Systemd1Manager *object);
gchar *systemd1_manager_dup_system_state (Systemd1Manager *object);
void systemd1_manager_set_system_state (Systemd1Manager *object, const gchar *value);

guchar systemd1_manager_get_exit_code (Systemd1Manager *object);
void systemd1_manager_set_exit_code (Systemd1Manager *object, guchar value);

guint64 systemd1_manager_get_default_timer_accuracy_usec (Systemd1Manager *object);
void systemd1_manager_set_default_timer_accuracy_usec (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_timeout_start_usec (Systemd1Manager *object);
void systemd1_manager_set_default_timeout_start_usec (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_timeout_stop_usec (Systemd1Manager *object);
void systemd1_manager_set_default_timeout_stop_usec (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_timeout_abort_usec (Systemd1Manager *object);
void systemd1_manager_set_default_timeout_abort_usec (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_restart_usec (Systemd1Manager *object);
void systemd1_manager_set_default_restart_usec (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_start_limit_interval_usec (Systemd1Manager *object);
void systemd1_manager_set_default_start_limit_interval_usec (Systemd1Manager *object, guint64 value);

guint systemd1_manager_get_default_start_limit_burst (Systemd1Manager *object);
void systemd1_manager_set_default_start_limit_burst (Systemd1Manager *object, guint value);

gboolean systemd1_manager_get_default_cpuaccounting (Systemd1Manager *object);
void systemd1_manager_set_default_cpuaccounting (Systemd1Manager *object, gboolean value);

gboolean systemd1_manager_get_default_block_ioaccounting (Systemd1Manager *object);
void systemd1_manager_set_default_block_ioaccounting (Systemd1Manager *object, gboolean value);

gboolean systemd1_manager_get_default_memory_accounting (Systemd1Manager *object);
void systemd1_manager_set_default_memory_accounting (Systemd1Manager *object, gboolean value);

gboolean systemd1_manager_get_default_tasks_accounting (Systemd1Manager *object);
void systemd1_manager_set_default_tasks_accounting (Systemd1Manager *object, gboolean value);

guint64 systemd1_manager_get_default_limit_cpu (Systemd1Manager *object);
void systemd1_manager_set_default_limit_cpu (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_cpusoft (Systemd1Manager *object);
void systemd1_manager_set_default_limit_cpusoft (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_fsize (Systemd1Manager *object);
void systemd1_manager_set_default_limit_fsize (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_fsizesoft (Systemd1Manager *object);
void systemd1_manager_set_default_limit_fsizesoft (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_data (Systemd1Manager *object);
void systemd1_manager_set_default_limit_data (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_datasoft (Systemd1Manager *object);
void systemd1_manager_set_default_limit_datasoft (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_stack (Systemd1Manager *object);
void systemd1_manager_set_default_limit_stack (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_stacksoft (Systemd1Manager *object);
void systemd1_manager_set_default_limit_stacksoft (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_core (Systemd1Manager *object);
void systemd1_manager_set_default_limit_core (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_coresoft (Systemd1Manager *object);
void systemd1_manager_set_default_limit_coresoft (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_rss (Systemd1Manager *object);
void systemd1_manager_set_default_limit_rss (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_rsssoft (Systemd1Manager *object);
void systemd1_manager_set_default_limit_rsssoft (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_nofile (Systemd1Manager *object);
void systemd1_manager_set_default_limit_nofile (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_nofilesoft (Systemd1Manager *object);
void systemd1_manager_set_default_limit_nofilesoft (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_as (Systemd1Manager *object);
void systemd1_manager_set_default_limit_as (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_assoft (Systemd1Manager *object);
void systemd1_manager_set_default_limit_assoft (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_nproc (Systemd1Manager *object);
void systemd1_manager_set_default_limit_nproc (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_nprocsoft (Systemd1Manager *object);
void systemd1_manager_set_default_limit_nprocsoft (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_memlock (Systemd1Manager *object);
void systemd1_manager_set_default_limit_memlock (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_memlocksoft (Systemd1Manager *object);
void systemd1_manager_set_default_limit_memlocksoft (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_locks (Systemd1Manager *object);
void systemd1_manager_set_default_limit_locks (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_lockssoft (Systemd1Manager *object);
void systemd1_manager_set_default_limit_lockssoft (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_sigpending (Systemd1Manager *object);
void systemd1_manager_set_default_limit_sigpending (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_sigpendingsoft (Systemd1Manager *object);
void systemd1_manager_set_default_limit_sigpendingsoft (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_msgqueue (Systemd1Manager *object);
void systemd1_manager_set_default_limit_msgqueue (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_msgqueuesoft (Systemd1Manager *object);
void systemd1_manager_set_default_limit_msgqueuesoft (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_nice (Systemd1Manager *object);
void systemd1_manager_set_default_limit_nice (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_nicesoft (Systemd1Manager *object);
void systemd1_manager_set_default_limit_nicesoft (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_rtprio (Systemd1Manager *object);
void systemd1_manager_set_default_limit_rtprio (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_rtpriosoft (Systemd1Manager *object);
void systemd1_manager_set_default_limit_rtpriosoft (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_rttime (Systemd1Manager *object);
void systemd1_manager_set_default_limit_rttime (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_limit_rttimesoft (Systemd1Manager *object);
void systemd1_manager_set_default_limit_rttimesoft (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_default_tasks_max (Systemd1Manager *object);
void systemd1_manager_set_default_tasks_max (Systemd1Manager *object, guint64 value);

guint64 systemd1_manager_get_timer_slack_nsec (Systemd1Manager *object);
void systemd1_manager_set_timer_slack_nsec (Systemd1Manager *object, guint64 value);

const gchar *systemd1_manager_get_default_oompolicy (Systemd1Manager *object);
gchar *systemd1_manager_dup_default_oompolicy (Systemd1Manager *object);
void systemd1_manager_set_default_oompolicy (Systemd1Manager *object, const gchar *value);

const gchar *systemd1_manager_get_ctrl_alt_del_burst_action (Systemd1Manager *object);
gchar *systemd1_manager_dup_ctrl_alt_del_burst_action (Systemd1Manager *object);
void systemd1_manager_set_ctrl_alt_del_burst_action (Systemd1Manager *object, const gchar *value);


/* ---- */

#define TYPE_SYSTEMD1_MANAGER_PROXY (systemd1_manager_proxy_get_type ())
#define SYSTEMD1_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SYSTEMD1_MANAGER_PROXY, Systemd1ManagerProxy))
#define SYSTEMD1_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SYSTEMD1_MANAGER_PROXY, Systemd1ManagerProxyClass))
#define SYSTEMD1_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SYSTEMD1_MANAGER_PROXY, Systemd1ManagerProxyClass))
#define IS_SYSTEMD1_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SYSTEMD1_MANAGER_PROXY))
#define IS_SYSTEMD1_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SYSTEMD1_MANAGER_PROXY))

typedef struct _Systemd1ManagerProxy Systemd1ManagerProxy;
typedef struct _Systemd1ManagerProxyClass Systemd1ManagerProxyClass;
typedef struct _Systemd1ManagerProxyPrivate Systemd1ManagerProxyPrivate;

struct _Systemd1ManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  Systemd1ManagerProxyPrivate *priv;
};

struct _Systemd1ManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType systemd1_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Systemd1ManagerProxy, g_object_unref)
#endif

void systemd1_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Systemd1Manager *systemd1_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Systemd1Manager *systemd1_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void systemd1_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Systemd1Manager *systemd1_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Systemd1Manager *systemd1_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_SYSTEMD1_MANAGER_SKELETON (systemd1_manager_skeleton_get_type ())
#define SYSTEMD1_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SYSTEMD1_MANAGER_SKELETON, Systemd1ManagerSkeleton))
#define SYSTEMD1_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SYSTEMD1_MANAGER_SKELETON, Systemd1ManagerSkeletonClass))
#define SYSTEMD1_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SYSTEMD1_MANAGER_SKELETON, Systemd1ManagerSkeletonClass))
#define IS_SYSTEMD1_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SYSTEMD1_MANAGER_SKELETON))
#define IS_SYSTEMD1_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SYSTEMD1_MANAGER_SKELETON))

typedef struct _Systemd1ManagerSkeleton Systemd1ManagerSkeleton;
typedef struct _Systemd1ManagerSkeletonClass Systemd1ManagerSkeletonClass;
typedef struct _Systemd1ManagerSkeletonPrivate Systemd1ManagerSkeletonPrivate;

struct _Systemd1ManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  Systemd1ManagerSkeletonPrivate *priv;
};

struct _Systemd1ManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType systemd1_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Systemd1ManagerSkeleton, g_object_unref)
#endif

Systemd1Manager *systemd1_manager_skeleton_new (void);


/* ---- */

#define TYPE_OBJECT (object_get_type ())
#define OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT, Object))
#define IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT))
#define OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_OBJECT, Object))

struct _Object;
typedef struct _Object Object;
typedef struct _ObjectIface ObjectIface;

struct _ObjectIface
{
  GTypeInterface parent_iface;
};

GType object_get_type (void) G_GNUC_CONST;

Systemd1Manager *object_get_systemd1_manager (Object *object);
Systemd1Manager *object_peek_systemd1_manager (Object *object);

#define TYPE_OBJECT_PROXY (object_proxy_get_type ())
#define OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_PROXY, ObjectProxy))
#define OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_PROXY, ObjectProxyClass))
#define OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_PROXY, ObjectProxyClass))
#define IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_PROXY))
#define IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_PROXY))

typedef struct _ObjectProxy ObjectProxy;
typedef struct _ObjectProxyClass ObjectProxyClass;
typedef struct _ObjectProxyPrivate ObjectProxyPrivate;

struct _ObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  ObjectProxyPrivate *priv;
};

struct _ObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectProxy, g_object_unref)
#endif

ObjectProxy *object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define TYPE_OBJECT_SKELETON (object_skeleton_get_type ())
#define OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_SKELETON, ObjectSkeleton))
#define OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_SKELETON, ObjectSkeletonClass))
#define OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_SKELETON, ObjectSkeletonClass))
#define IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_SKELETON))
#define IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_SKELETON))

typedef struct _ObjectSkeleton ObjectSkeleton;
typedef struct _ObjectSkeletonClass ObjectSkeletonClass;
typedef struct _ObjectSkeletonPrivate ObjectSkeletonPrivate;

struct _ObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  ObjectSkeletonPrivate *priv;
};

struct _ObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectSkeleton, g_object_unref)
#endif

ObjectSkeleton *object_skeleton_new (const gchar *object_path);
void object_skeleton_set_systemd1_manager (ObjectSkeleton *object, Systemd1Manager *interface_);

/* ---- */

#define TYPE_OBJECT_MANAGER_CLIENT (object_manager_client_get_type ())
#define OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClient))
#define OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClientClass))
#define OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClientClass))
#define IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_MANAGER_CLIENT))
#define IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _ObjectManagerClient ObjectManagerClient;
typedef struct _ObjectManagerClientClass ObjectManagerClientClass;
typedef struct _ObjectManagerClientPrivate ObjectManagerClientPrivate;

struct _ObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  ObjectManagerClientPrivate *priv;
};

struct _ObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectManagerClient, g_object_unref)
#endif

GType object_manager_client_get_type (void) G_GNUC_CONST;

GType object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __SYSTEMD1_MANAGER_INTERFACE_H__ */
